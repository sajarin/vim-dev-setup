" ===================================================================
" Author:        Shaedil D.
" Maintainer:    Shaedil D.
" Website Link:  https://github.com/Shaedil/vim-config
" Description:   Minimal (No Plugins) vimrc used for TUI and GUI Vim
" Last Modified: 5/15/20
" ===================================================================
"{{{ Tabs, foldmethods, syntax
    set nocompatible
    syntax on
    set encoding=utf8
    filetype off
    set hlsearch
    set incsearch
    set nonumber
    set relativenumber
    set pastetoggle=<F2>
    set mouse=a
    set backspace=indent,eol,start
    set autoindent
    set tabstop=4
    set expandtab
    set softtabstop=0
    set shiftwidth=4
    set foldmethod=marker
    set splitbelow
    set tags=tags
    set cursorline
    set path=.,**
    set omnifunc=syntaxcomplete#Complete
    set wildmenu
    set wildmode=longest:full
    set wildcharm=<C-b>
    set wildignore=*.swip,*.bak
    set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user
    set wildignore+=*.cache,*.dll,*.pdb,*.min.*
    set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
    set wildignore+=tags
    set wildignore+=*.tar.*
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
      \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
    inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
      \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
    nmap <F12> :w <CR>
"}}}
" FUNCTIONS{{{
" ToggleCursors - Useful for when you forget where your cursor is {{{
    " Useful for when you forget where your cursor is
nnoremap <F3> :call ToggleCursors()<CR>
fun! ToggleCursors()
    if &cursorline && &cursorcolumn
        set nocursorcolumn
        set nocursorline
    else
        set cursorcolumn
        set cursorline
    endif
endfun "}}}
" Vullscreen - Removes annoying menu at top{{{
nnoremap <F11> :call VullScreen()<cr>
fun! VullScreen()
    if &go=~#'m'
        set go-=m
        set go-=T
        set go-=r
        set go-=R
        set go-=l
        set go-=L
    else
        set go+=m
        set go+=T
        set go+=r
        set go+=R
        set go+=l
        set go+=L
    endif
endfun "}}}
" Pomodoro - Buggy and only works with GUI Vim{{{
nnoremap <F10> :call PomodoroBreak()<cr>
nnoremap <F9> :call PomodoroStart()<cr>
fun! PomodoroBreak()
    let g:timer = timer_start(60000, 'Pomodoro', {'repeat':-1}) "12000 = 1 min 
    let g:value = 0
endfun
fun! Pomodoro(timer)
    let g:value +=1
    if g:value == 5
        call Beep()
        echo 'break is over'
    endif
endfun
fun! Beep() "beeps 3 times
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
endfun
fun! PomodoroStart()
    let g:timer = timer_start(240000, 'Pomodoro', {'repeat':-1}) "12000 = 1 min 
    let g:value = 0
endfun
fun! Pomodoro(timer)
    let g:value +=1
    if g:value == 5
        call Beep()
        echo 'take a break'
    endif
endfun
fun! Beep() "beeps 3 times
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
    sleep 500m
    exec ':exe "normal \<Esc>"'
endfun "}}}
"}}}
" Font, colorscheme, statusline{{{
" Set Font
set guifont=DroidSansMono_NF:h10:cANSI:qDRAFT
" Colorscheme
colorscheme monalisa
" Statusline
" Sets statusline visible at all times: 
" 0=never 1=sometimes(default) 2=always
" Statusline
" :h mode() to see all modes
function! ReadOnly()
    if &readonly || !&modifiable
        return '[RO]'
    else
        return ''
endfunction
"function! GitBranch()
"    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
"endfunction
"function! StatuslineGit()
"  let l:branchname = GitBranch()
"  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
"endfunction
set laststatus=2
set statusline=
" set statusline+=%{StatuslineGit()}
set statusline+=%8*\ [%n]                                " buffernr
set statusline+=%8*\ %<%f\ %{ReadOnly()}\ %m\ %w\        " File+path
set statusline+=%#warningmsg#
set statusline+=%*
set statusline+=%9*\ %=                                  " Space
set statusline+=%8*\ %y\                                 " FileType
set statusline+=%7*\ %{(&fenc!=''?&fenc:&enc)}\[%{&ff}]\ 
" Encoding & Fileformat
set statusline+=%0*\ %3p%%\ î‚¡\ %l:\ %3c\                 " Rownumber/total (%)
hi statuslinenc ctermfg=8 ctermbg=7
hi TabLine      ctermfg=7 ctermbg=8
hi TabLineFill  ctermfg=0 ctermbg=7
hi TabLineSel   ctermfg=8 ctermbg=7
hi User1 ctermfg=007
hi User2 ctermfg=007
hi User3 ctermfg=007
hi User4 ctermfg=007
hi User5 ctermfg=007 ctermbg=007
hi User6 ctermfg=007
hi User7 ctermfg=027 | " controls unicode color
hi User8 ctermfg=007 | " controls filename color
hi User9 ctermfg=007
"}}}
"{{{ Keybindings
" Abbreviations{{{
ca vsf vert sf
ca W w
ca Wq wq
"}}}
"Navigating split windows{{{
noremap <C-J> <C-W><C-J>
noremap <C-K> <C-W><C-K>
noremap <C-L> <C-W><C-L>
noremap <C-H> <C-W><C-H>
"}}}
"Adjusting split windows{{{
noremap <C-up> <C-w>+ 
noremap <C-down> <C-w>- 
noremap <leader>] <C-w>>
noremap <leader>[ <C-w><
"}}}
"Navigating Tabs{{{
" gt is default
nnoremap gt :tabnext<CR>
nnoremap th :tabprev<CR>
nnoremap tn :tabnew<CR>
nnoremap tc :tabclose<CR>
"}}}
"Buffer Jumping{{{
nnoremap gb :ls<Cr>:b<Space>
"}}}
